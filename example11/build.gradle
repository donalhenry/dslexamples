buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'org.ajoberstar.grgit:grgit-gradle:3.1.1'
  }
}

apply plugin: 'base'

task getRepo (type: GitGetTask) {
  repoName = 'dslexamples'
  baseUrl = 'https://github.com/donalhenry'
}

task zipRepo (type: ZipRepo) {
  from getRepo
  version = getRepo.version
}

clean.dependsOn cleanGetRepo

// lifted from https://guides.gradle.org/implementing-gradle-plugins/ - LatestArtifactVersion.java
class ZipRepo extends Zip {
  final Property<String> versionZip = project.objects.property(String)

  String getVersion() {
    return this.versionZip.getOrElse(super.getVersion())
  }

  void setVersion(Provider<String> versionZip) {
    this.versionZip.set(versionZip)
  }
}

import org.ajoberstar.grgit.Grgit

class GitGetTask extends DefaultTask {
  @Input final Property<String> repoName = project.objects.property(String)
  @Input final Property<String> baseUrl = project.objects.property(String)
  @Input final Property<String> branchName = project.objects.property(String)
  @OutputDirectory final DirectoryProperty destinationDir = newOutputDirectory()

  GitGetTask() {
    destinationDir.set(project.layout.projectDirectory.dir(repoName))
    branchName.set('master')
  }

  @TaskAction doIt() {
    def gitUrl = baseUrl.get() + "/" + repoName.get()
    println "Checking out $gitUrl(origin/$branchName)..."
    Grgit.clone(dir: destinationDir.get().getAsFile(), uri: gitUrl, checkout: true, refToCheckout: branchName.get())
  }

  Provider<String> getVersion() {
    project.provider {
      def gitRepo = Grgit.open(dir: destinationDir.get().getAsFile())
      try {
        return gitRepo.head().abbreviatedId
      } finally {
        gitRepo.close()
      }
    }
  }
}
